[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Execode",
    "section": "",
    "text": "For common users/developers, please just run the following command the install the package:\npip install -e \".\"\nFor intended contributors, we recommend installing the package with the dev extras:\npip install -e \".[dev]\"\npre-commit install",
    "crumbs": [
      "Execode"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Execode",
    "section": "",
    "text": "For common users/developers, please just run the following command the install the package:\npip install -e \".\"\nFor intended contributors, we recommend installing the package with the dev extras:\npip install -e \".[dev]\"\npre-commit install",
    "crumbs": [
      "Execode"
    ]
  },
  {
    "objectID": "index.html#api-reference",
    "href": "index.html#api-reference",
    "title": "Execode",
    "section": "API Reference",
    "text": "API Reference\n\nfrom execode import *\n\n\nsource\n\nCodeExecCfg\n\n CodeExecCfg (input_begin:str='```python', input_end:str='```',\n              output_code_prefix:str='print(',\n              output_begin:str='```output', output_end:str='```',\n              timeout:int=5, n_call_max:int=2,\n              trunc_len:tuple[int,int]=(50, 50), elipsis:str='...')\n\nConfiguration for code execution.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_begin\nstr\npython |  | | input_end | str |\n\n\n\noutput_code_prefix\nstr\nprint(\nPrefix of code that will be executed to display the output.\n\n\noutput_begin\nstr\noutput |  | | output_end | str |\n\n\n\ntimeout\nint\n5\nTimeout in seconds for code execution.\n\n\nn_call_max\nint\n2\nThe maximum number of calls to the code execution function.\n\n\ntrunc_len\ntuple\n(50, 50)\nThe maximum lengths to truncate the output into the beginning and end.\n\n\nelipsis\nstr\nâ€¦\nThe elipsis to use when truncating the output.\n\n\n\n\nsource\n\nCodeExecCfg.load_from_id_or_path\n\n CodeExecCfg.load_from_id_or_path (tool_config:str='python')\n\nLoad the configuration from the ID or path.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntool_config\nstr\npython\nID / Path to file of the code executeion configuration.\n\n\nReturns\nCodeExecCfg\n\nThe code execution configuration object.\n\n\n\n\nsource\n\n\nCodeExecCfg.no_cells_todo\n\n CodeExecCfg.no_cells_todo (context:str)\n\nJudge if there are no code cells to execute.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncontext\nstr\nThe whole context containing all the code cells.\n\n\nReturns\nint\n0: Normal1: No code cells to execute2: Output cells are more than input cells\n\n\n\n\nsource\n\n\nCodeExecCfg.extract_cells\n\n CodeExecCfg.extract_cells (text:str)\n\nExtract code cells from the text.\n\n\n\n\nType\nDetails\n\n\n\n\ntext\nstr\nThe text to extract code cells from.\n\n\nReturns\nlist\nThe extracted code cells.\n\n\n\n\nsource\n\n\nCodeExecCfg.wrap_output\n\n CodeExecCfg.wrap_output (output:str)\n\nReturn f\"{self.output_begin}\\n{output}\\n{self.output_end}\"\n\nsource\n\n\n\nexec_cells\n\n exec_cells (cells:list[str])\n\nExecute the code cells like a notebook and return the stdout and stderr of the last cell. Modified from - https://github.com/Kipok/NeMo-Skills/blob/6a909ec0974340b02a1083dce90e79bea30ecb60/nemo_skills/code_execution/sandbox.py#L168-L233 - https://github.com/deepseek-ai/DeepSeek-Math/blob/b8b0f8ce093d80bf8e9a641e44142f06d092c305/evaluation/infer/run_tool_integrated_eval.py#L163-L180\n\n\n\n\nType\nDetails\n\n\n\n\ncells\nlist\nThe code cells to execute.\n\n\nReturns\ntuple",
    "crumbs": [
      "Execode"
    ]
  }
]